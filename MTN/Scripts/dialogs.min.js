!function () { "use strict"; var a = angular.module("translate.sub", []); a.provider("$translate", [function () { var a = [], b = "en-US"; this.translations = function (c, d) { angular.isDefined(c) && angular.isDefined(d) && (a[c] = angular.copy(d), b = c) }, this.$get = [function () { return { instant: function (c) { return angular.isDefined(c) && angular.isDefined(a[b][c]) ? a[b][c] : "" } } }] }]), a.filter("translate", ["$translate", function (a) { return function (b) { return a.instant(b) } }]); var b; try { angular.module("pascalprecht.translate"), b = angular.module("dialogs.controllers", ["ui.bootstrap.modal", "pascalprecht.translate"]) } catch (a) { b = angular.module("dialogs.controllers", ["ui.bootstrap.modal", "translate.sub"]) } b.controller("errorDialogCtrl", ["$scope", "$uibModalInstance", "$translate", "data", function (a, b, c, d) { a.header = angular.isDefined(d.header) ? d.header : c.instant("DIALOGS_ERROR"), a.msg = angular.isDefined(d.msg) ? d.msg : c.instant("DIALOGS_ERROR_MSG"), a.icon = angular.isDefined(d.fa) && angular.equals(d.fa, !0) ? "fa fa-warning" : "glyphicon glyphicon-warning-sign", a.close = function () { b.close(), a.$destroy() } }]), b.controller("waitDialogCtrl", ["$scope", "$uibModalInstance", "$translate", "$timeout", "data", function (a, b, c, d, e) { a.header = angular.isDefined(e.header) ? e.header : c.instant("DIALOGS_PLEASE_WAIT_ELIPS"), a.msg = angular.isDefined(e.msg) ? e.msg : c.instant("DIALOGS_PLEASE_WAIT_MSG"), a.progress = angular.isDefined(e.progress) ? e.progress : 100, a.icon = angular.isDefined(e.fa) && angular.equals(e.fa, !0) ? "fa fa-clock-o" : "glyphicon glyphicon-time", a.$on("dialogs.wait.complete", function () { d(function () { b.close(), a.$destroy() }) }), a.$on("dialogs.wait.message", function (b, c) { a.msg = angular.isDefined(c.msg) ? c.msg : a.msg }), a.$on("dialogs.wait.progress", function (b, c) { a.msg = angular.isDefined(c.msg) ? c.msg : a.msg, a.progress = angular.isDefined(c.progress) ? c.progress : a.progress }), a.getProgress = function () { return { width: a.progress + "%" } } }]), b.controller("notifyDialogCtrl", ["$scope", "$uibModalInstance", "$translate", "data", function (a, b, c, d) { a.header = angular.isDefined(d.header) ? d.header : c.instant("DIALOGS_NOTIFICATION"), a.msg = angular.isDefined(d.msg) ? d.msg : c.instant("DIALOGS_NOTIFICATION_MSG"), a.icon = angular.isDefined(d.fa) && angular.equals(d.fa, !0) ? "fa fa-info" : "glyphicon glyphicon-info-sign", a.close = function () { b.close(), a.$destroy() } }]), b.controller("confirmDialogCtrl", ["$scope", "$uibModalInstance", "$translate", "data", function (a, b, c, d) { a.header = angular.isDefined(d.header) ? d.header : c.instant("DIALOGS_CONFIRMATION"), a.msg = angular.isDefined(d.msg) ? d.msg : c.instant("DIALOGS_CONFIRMATION_MSG"), a.icon = angular.isDefined(d.fa) && angular.equals(d.fa, !0) ? "fa fa-check" : "glyphicon glyphicon-check", a.no = function () { b.dismiss("no") }, a.yes = function () { b.close("yes") } }]), angular.module("dialogs.services", ["ui.bootstrap.modal", "dialogs.controllers"]).provider("dialogs", [function () { var a = !0, b = !0, c = "dialogs-default", d = "dialogs-backdrop-default", e = !0, f = null, g = "lg", h = !1, i = !1, j = function (e) { var f = {}; return e = e || {}, f.kb = angular.isDefined(e.keyboard) ? !!e.keyboard : b, f.bd = angular.isDefined(e.backdrop) ? e.backdrop : a, f.bdc = angular.isDefined(e.backdropClass) ? e.backdropClass : d, f.ws = !angular.isDefined(e.size) || "sm" !== e.size && "lg" !== e.size && "md" !== e.size ? g : e.size, f.wc = angular.isDefined(e.windowClass) ? e.windowClass : c, f.anim = angular.isDefined(e.animation) ? !!e.animation : h, f }; this.useBackdrop = function (b) { angular.isDefined(b) && (a = b) }, this.useEscClose = function (a) { angular.isDefined(a) && (b = !(angular.equals(a, 0) || angular.equals(a, "false") || angular.equals(a, "no") || angular.equals(a, null) || angular.equals(a, !1))) }, this.useClass = function (a) { angular.isDefined(a) && (c = a) }, this.useCopy = function (a) { angular.isDefined(a) && (e = !(angular.equals(a, 0) || angular.equals(a, "false") || angular.equals(a, "no") || angular.equals(a, null) || angular.equals(a, !1))) }, this.setWindowTmpl = function (a) { angular.isDefined(a) && (f = a) }, this.setSize = function (a) { angular.isDefined(a) && (g = angular.equals(a, "sm") || angular.equals(a, "lg") || angular.equals(a, "md") ? a : g) }, this.useAnimation = function () { h = !0 }, this.useFontAwesome = function () { i = !0 }, this.$get = ["$uibModal", function (a) { return { error: function (b, c, d) { return d = j(d), a.open({ templateUrl: "/dialogs/error.html", controller: "errorDialogCtrl", backdrop: d.bd, backdropClass: d.bdc, keyboard: d.kb, windowClass: d.wc, size: d.ws, animation: d.anim, resolve: { data: function () { return { header: angular.copy(b), msg: angular.copy(c), fa: i } } } }) }, wait: function (b, c, d, e) { return e = j(e), a.open({ templateUrl: "/dialogs/wait.html", controller: "waitDialogCtrl", backdrop: e.bd, backdropClass: e.bdc, keyboard: e.kb, windowClass: e.wc, size: e.ws, animation: e.anim, resolve: { data: function () { return { header: angular.copy(b), msg: angular.copy(c), progress: angular.copy(d), fa: i } } } }) }, notify: function (b, c, d) { return d = j(d), a.open({ templateUrl: "/dialogs/notify.html", controller: "notifyDialogCtrl", backdrop: d.bd, backdropClass: d.bdc, keyboard: d.kb, windowClass: d.wc, size: d.ws, animation: d.anim, resolve: { data: function () { return { header: angular.copy(b), msg: angular.copy(c), fa: i } } } }) }, confirm: function (b, c, d) { return d = j(d), a.open({ templateUrl: "/dialogs/confirm.html", controller: "confirmDialogCtrl", backdrop: d.bd, backdropClass: d.bdc, keyboard: d.kb, windowClass: d.wc, size: d.ws, animation: d.anim, resolve: { data: function () { return { header: angular.copy(b), msg: angular.copy(c), fa: i } } } }) }, create: function (b, c, d, f, g) { var h = f && angular.isDefined(f.copy) ? f.copy : e; return f = j(f), a.open({ templateUrl: b, controller: c, controllerAs: g, keyboard: f.kb, backdrop: f.bd, backdropClass: f.bdc, windowClass: f.wc, size: f.ws, animation: f.anim, resolve: { data: function () { return h ? angular.copy(d) : d } } }) } } }] }]), angular.module("dialogs.main", ["dialogs.services", "ngSanitize"]).config(["$translateProvider", "dialogsProvider", function (a, b) { try { angular.module("pascalprecht.translate") } catch (b) { a.translations("en-US", { DIALOGS_ERROR: "Lỗi", DIALOGS_ERROR_MSG: "Có lỗi xảy ra.", DIALOGS_CLOSE: "Đóng lại", DIALOGS_PLEASE_WAIT: "Vui lòng đợi", DIALOGS_PLEASE_WAIT_ELIPS: "Vui lòng đợi...", DIALOGS_PLEASE_WAIT_MSG: "Vui lòng đợi cho đến khi hoàn thành.", DIALOGS_PERCENT_COMPLETE: "% Hoàn thành", DIALOGS_NOTIFICATION: "Thông báo", DIALOGS_NOTIFICATION_MSG: "Unknown application notification.", DIALOGS_CONFIRMATION: "Xác nhận", DIALOGS_CONFIRMATION_MSG: "Confirmation required.", DIALOGS_OK: "Đồng ý", DIALOGS_YES: "Đồng ý", DIALOGS_NO: "Không" }) } try { var c = document.styleSheets; a: for (var d = c.length - 1; d >= 0; d--) { var e = null, f = null; if (!c[d].disabled) { if (null !== c[d].href && (e = c[d].href.match(/font\-*awesome/i)), angular.isArray(e)) { b.useFontAwesome(); break } f = c[d].cssRules; for (var g = f.length - 1; g >= 0; g--) if ("string" == typeof f[g].selectorText && ".fa" === f[g].selectorText.toLowerCase()) { b.useFontAwesome(); break a } } } } catch (a) { } }]).run(["$templateCache", "$interpolate", function (a, b) { var c = b.startSymbol(), d = b.endSymbol(); a.put("/dialogs/error.html", '<div class="modal-header dialog-header-error"><button type="button" class="close" ng-click="close()">&times;</button><h4 class="modal-title text-danger"><span class="' + c + "icon" + d + '"></span> <span ng-bind-html="header"></span></h4></div><div class="modal-body text-danger" ng-bind-html="msg"></div><div class="modal-footer"><button type="button" class="btn btn-default" ng-click="close()">' + c + '"DIALOGS_CLOSE" | translate' + d + "</button></div>"), a.put("/dialogs/wait.html", '<div class="modal-header dialog-header-wait"><h4 class="modal-title"><span class="' + c + "icon" + d + '"></span> ' + c + "header" + d + '</h4></div><div class="modal-body"><p ng-bind-html="msg"></p><div class="progress progress-striped active"><div class="progress-bar progress-bar-info" ng-style="getProgress()"></div><span class="sr-only">' + c + "progress" + d + c + '"DIALOGS_PERCENT_COMPLETE" | translate' + d + "</span></div></div>"), a.put("/dialogs/notify.html", '<div class="modal-header dialog-header-notify"><button type="button" class="close" ng-click="close()" class="pull-right">&times;</button><h4 class="modal-title text-info"><span class="' + c + "icon" + d + '"></span> ' + c + "header" + d + '</h4></div><div class="modal-body text-info" ng-bind-html="msg"></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="close()">' + c + '"DIALOGS_OK" | translate' + d + "</button></div>"), a.put("/dialogs/confirm.html", '<div class="modal-header dialog-header-confirm"><button type="button" class="close" ng-click="no()">&times;</button><h4 class="modal-title"><span class="' + c + "icon" + d + '"></span> ' + c + "header" + d + '</h4></div><div class="modal-body" ng-bind-html="msg"></div><div class="modal-footer"><button type="button" class="btn btn-default" ng-click="yes()">' + c + '"DIALOGS_YES" | translate' + d + '</button><button type="button" class="btn btn-primary" ng-click="no()">' + c + '"DIALOGS_NO" | translate' + d + "</button></div>") }]) }();